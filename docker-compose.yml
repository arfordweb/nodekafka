version: "3.8"

networks:
  app-tier:
    driver: bridge

services:
  nodekafka_producer:
    build: ./
    container_name: nodekafka_producer
    networks:
      - app-tier
    image: nodekafka:v1
    user: node
    working_dir: /home/node/app
    environment:
      - NODE_ENV=development
      - RUN_MODE=producer
    volumes:
      - /Users/darnellarford/src/nodekafka:/home/node/app
      - /home/node/app/node_modules
    command: "npm start"
  nodekafka_consumer:
    build: ./
    container_name: nodekafka_consumer
    networks:
      - app-tier
    image: nodekafka:v1
    user: node
    working_dir: /home/node/app
    environment:
      - NODE_ENV=development
      - RUN_MODE=consumer
    volumes:
      - /Users/darnellarford/src/nodekafka:/home/node/app
      - /home/node/app/node_modules
    command: "npm start"
  kafka:
    image: docker.io/bitnami/kafka:3.6
    container_name: kafka
    networks:
      - app-tier
    ports:
      - 9092:9092
    volumes:
      - /Users/darnellarford/src/nodekafka/bitnami:/bitnami
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
# volumes:
#   kafka_data:
#     driver: local
